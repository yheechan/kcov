57,4301,0,0,2,prog && strrchr(prog, '/')
58,4321,0,2,2,(opt = getopt(argc, argv, "0123456789A:B:CEFGVX:bce:f:hiLlnqsvwxy")) != (-1)
59,4329,0,0,1,case '0'
60,4330,0,0,1,case '1'
61,4331,3,0,1,case '2'
62,4332,0,3,1,case '3'
63,4333,0,3,1,case '4'
64,4334,0,33,1,case '5'
65,4335,0,33,1,case '6'
66,4336,0,0,1,case '7'
67,4337,0,0,1,case '8'
68,4338,684,33,1,case '9'
69,4342,27,6,1,case 'A'
70,4344,0,27,2,out_after < 0
71,4347,3,3,1,case 'B'
72,4349,30,3,2,out_before < 0
73,4352,0,0,1,case 'C'
74,4355,9648,257381,1,case 'E'
75,4356,0,1399,2,matcher && strcmp(matcher, "egrep") != 0
76,4360,1281,118,1,case 'F'
77,4361,0,1399,2,matcher && strcmp(matcher, "fgrep") != 0
78,4365,0,1399,1,case 'G'
79,4366,0,0,2,matcher && strcmp(matcher, "grep") != 0
80,4370,0,0,1,case 'V'
81,4377,0,0,1,case 'X'
82,4378,0,1399,2,matcher
83,4382,1399,0,1,case 'b'
84,4385,0,0,1,case 'c'
85,4389,0,0,1,case 'e'
86,4392,0,0,2,keyfound
87,4398,0,1399,1,case 'f'
88,4404,0,1399,2,!fp
89,4410,0,1399,2,keyalloc <= keycc
90,4414,0,0,2,keyfound
91,4416,0,0,2,!feof(fp) && (cc = fread(keys + keycc, 1, keyalloc - keycc, fp)) > 0
92,4420,0,0,2,keycc == keyalloc
93,4423,1399,0,2,fp != stdin
94,4430,1399,30,2,keycc - oldcc > 0 && keys[keycc - 1] == '\n'
95,4434,0,1399,1,case 'h'
96,4437,1399,0,1,case 'i'
97,4438,0,0,1,case 'y'
98,4441,0,30,1,case 'L'
99,4447,33,0,1,case 'l'
100,4451,0,33,1,case 'n'
101,4454,0,33,1,case 'q'
102,4457,3,30,1,case 's'
103,4460,0,0,1,case 'v'
104,4463,30,0,1,case 'w'
105,4466,0,30,1,case 'x'
106,4469,0,30,1,default
107,4474,0,0,2,!keyfound
108,4475,30,0,2,optind < argc
109,4483,10,20,2,!matcher
110,4486,0,3,2,!setmatcher(matcher) && !setmatcher("default")
111,4491,0,0,2,argc - optind > 1 && !no_filenames
112,4496,0,0,2,optind < argc
113,4497,3,16,2,optind < argc
114,4504,0,3,2,desc < 0
115,4506,3,3,2,!suppress_errors
116,4517,0,0,2,count_matches
117,4519,0,0,2,out_file
118,4523,0,0,2,count
119,4526,0,0,2,list_files == 1
120,4529,0,0,2,list_files == -1
121,4532,0,0,2,desc != 0
122,4540,0,0,2,count_matches
123,4542,0,0,2,count
124,4545,0,0,2,list_files == 1
125,4548,0,0,2,list_files == -1
126,4563,0,0,2,done
127,4568,0,0,2,c <= 'z'
128,4571,0,0,2,c <= 'Z'
129,4574,0,0,2,c <= '9'
130,5096,0,0,2,compile_stack.stack == ((void *)0)
131,5124,2,0,2,bufp->allocated == 0
132,5126,0,2,2,bufp->buffer
133,5136,0,0,2,!bufp->buffer
134,5144,0,0,2,p != pend
135,5146,0,0,2,0
136,5146,0,0,2,p == pend
137,5146,0,0,2,translate
138,5150,0,0,1,case '^'
139,5152,0,0,2,p == pattern + 1 || syntax & ((((1) << 1) << 1) << 1) || at_begline_loc_p(pattern, p, syntax)
140,5158,0,0,2,0
141,5158,0,0,2,b - bufp->buffer + (1) > bufp->allocated
142,5158,0,0,2,0
143,5158,0,0,2,bufp->allocated == (1L << 16)
144,5158,0,0,2,bufp->allocated > (1L << 16)
145,5158,0,0,2,bufp->buffer == ((void *)0)
146,5162,0,0,2,old_buffer != bufp->buffer
147,5162,0,0,2,fixup_alt_jump
148,5162,0,0,2,laststart
149,5162,0,0,2,pending_exact
150,5169,0,0,1,case '$'
151,5171,0,0,2,p == pend || syntax & ((((1) << 1) << 1) << 1) || at_endline_loc_p(p, pend, syntax)
152,5177,0,0,2,0
153,5177,0,0,2,b - bufp->buffer + (1) > bufp->allocated
154,5177,0,0,2,0
155,5177,0,0,2,bufp->allocated == (1L << 16)
156,5177,0,0,2,bufp->allocated > (1L << 16)
157,5177,1,0,2,bufp->buffer == ((void *)0)
158,5181,0,0,2,old_buffer != bufp->buffer
159,5181,0,0,2,fixup_alt_jump
160,5181,0,0,2,laststart
161,5181,0,0,2,pending_exact
162,5188,0,0,1,case '+'
163,5189,0,0,1,case '?'
164,5190,3,0,2,(syntax & ((1) << 1)) || (syntax & (((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
165,5194,3,0,1,case '*'
166,5196,1,2,2,!laststart
167,5198,0,3,2,syntax & ((((((1) << 1) << 1) << 1) << 1) << 1)
168,5200,0,3,2,!(syntax & (((((1) << 1) << 1) << 1) << 1))
169,5216,3,0,2,1
170,5221,3,3,2,p == pend
171,5224,0,3,2,0
172,5224,0,0,2,p == pend
173,5224,0,3,2,translate
174,5226,0,0,2,c == '*' || (!(syntax & ((1) << 1)) && (c == '+' || c == '?'))
175,5230,3,0,2,syntax & ((1) << 1) && c == '\\'
176,5232,0,3,2,p == pend
177,5234,0,0,2,0
178,5234,3,0,2,p == pend
179,5234,0,0,2,translate
180,5235,0,0,2,!(c1 == '+' || c1 == '?')
181,5255,0,0,2,!laststart
182,5260,0,0,2,many_times_ok
183,5266,0,3,2,b - bufp->buffer + (3) > bufp->allocated
184,5266,0,0,2,0
185,5266,0,0,2,bufp->allocated == (1L << 16)
186,5266,0,0,2,bufp->allocated > (1L << 16)
187,5266,0,3,2,bufp->buffer == ((void *)0)
188,5270,3,0,2,old_buffer != bufp->buffer
189,5270,0,3,2,fixup_alt_jump
190,5270,0,3,2,laststart
191,5270,7,3,2,pending_exact
192,5277,0,7,2,(translate ? translate[(unsigned char)(*(p - 2))] : (*(p - 2))) == (translate ? translate[(unsigned char)('.')] : ('.')) && zero_times_ok && p < pend && (translate ? translate[(unsigned char)(*p)] : (*p)) == (translate ? translate[(unsigned char)('\n')] : ('\n')) && !(syntax & (((((((1) << 1) << 1) << 1) << 1) << 1) << 1))
193,5295,0,7,2,b - bufp->buffer + (3) > bufp->allocated
194,5295,0,7,2,0
195,5295,0,0,2,bufp->allocated == (1L << 16)
196,5295,0,0,2,bufp->allocated > (1L << 16)
197,5295,0,0,2,bufp->buffer == ((void *)0)
198,5299,0,0,2,old_buffer != bufp->buffer
199,5299,0,0,2,fixup_alt_jump
200,5299,0,0,2,laststart
201,5299,0,0,2,pending_exact
202,5306,0,0,2,!zero_times_ok
203,5313,0,0,2,b - bufp->buffer + (3) > bufp->allocated
204,5313,0,0,2,0
205,5313,0,0,2,bufp->allocated == (1L << 16)
206,5313,0,0,2,bufp->allocated > (1L << 16)
207,5313,0,0,2,bufp->buffer == ((void *)0)
208,5317,0,0,2,old_buffer != bufp->buffer
209,5317,0,0,2,fixup_alt_jump
210,5317,0,0,2,laststart
211,5317,0,0,2,pending_exact
212,5325,0,0,1,case '.'
213,5327,0,0,2,0
214,5327,0,0,2,b - bufp->buffer + (1) > bufp->allocated
215,5327,0,0,2,0
216,5327,0,0,2,bufp->allocated == (1L << 16)
217,5327,0,0,2,bufp->allocated > (1L << 16)
218,5327,0,0,2,bufp->buffer == ((void *)0)
219,5331,1,0,2,old_buffer != bufp->buffer
220,5331,1,0,2,fixup_alt_jump
221,5331,0,1,2,laststart
222,5331,1,0,2,pending_exact
223,5335,0,1,1,case '['
224,5339,0,0,2,p == pend
225,5343,0,0,2,b - bufp->buffer + (34) > bufp->allocated
226,5343,1,0,2,0
227,5343,1,0,2,bufp->allocated == (1L << 16)
228,5343,0,0,2,bufp->allocated > (1L << 16)
229,5343,0,0,2,bufp->buffer == ((void *)0)
230,5347,0,0,2,old_buffer != bufp->buffer
231,5347,0,0,2,fixup_alt_jump
232,5347,0,0,2,laststart
233,5347,0,0,2,pending_exact
234,5353,0,0,2,0
235,5353,0,0,2,b - bufp->buffer + (1) > bufp->allocated
236,5353,0,0,2,0
237,5353,0,0,2,bufp->allocated == (1L << 16)
238,5353,0,1,2,bufp->allocated > (1L << 16)
239,5353,1,0,2,bufp->buffer == ((void *)0)
240,5357,0,1,2,old_buffer != bufp->buffer
241,5357,0,0,2,fixup_alt_jump
242,5357,0,0,2,laststart
243,5357,0,0,2,pending_exact
244,5358,0,0,2,*p == '^'
245,5365,0,0,2,0
246,5365,0,0,2,b - bufp->buffer + (1) > bufp->allocated
247,5365,0,0,2,0
248,5365,0,0,2,bufp->allocated == (1L << 16)
249,5365,0,1,2,bufp->allocated > (1L << 16)
250,5365,0,1,2,bufp->buffer == ((void *)0)
251,5369,0,0,2,old_buffer != bufp->buffer
252,5369,0,0,2,fixup_alt_jump
253,5369,0,0,2,laststart
254,5369,0,0,2,pending_exact
255,5375,0,0,2,(re_opcode_t)b[-2] == charset_not && (syntax & (((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
256,5380,0,0,2,1
257,5382,0,0,2,p == pend
258,5384,0,0,2,0
259,5384,1,0,2,p == pend
260,5384,0,1,2,translate
261,5387,0,0,2,(syntax & (1)) && c == '\\'
262,5389,0,0,2,p == pend
263,5391,0,0,2,0
264,5391,0,0,2,p == pend
265,5391,0,0,2,translate
266,5399,0,0,2,c == ']' && p != p1 + 1
267,5404,0,0,2,had_char_class && c == '-' && *p != ']'
268,5411,0,0,2,c == '-' && !(p - 2 >= pattern && p[-2] == '[') && !(p - 3 >= pattern && p[-3] == '[' && p[-2] == '^') && *p != ']'
269,5418,0,0,2,ret != REG_NOERROR
270,5421,0,0,2,p[0] == '-' && p[1] != ']'
271,5426,0,0,2,0
272,5426,0,0,2,p == pend
273,5426,0,0,2,translate
274,5429,0,0,2,ret != REG_NOERROR
275,5435,0,0,2,syntax & (((1) << 1) << 1) && c == '[' && *p == ':'
276,5439,0,0,2,0
277,5439,0,0,2,p == pend
278,5439,0,0,2,translate
279,5443,0,0,2,p == pend
280,5445,4,0,2,1
281,5447,0,4,2,0
282,5447,2,4,2,p == pend
283,5447,0,2,2,translate
284,5448,0,2,2,c == ':' || c == ']' || p == pend || c1 == 6
285,5458,0,2,2,c == ':' && *p == ']'
286,5474,0,2,2,!(((strcmp(str, "alpha") == 0)) || ((strcmp(str, "upper") == 0)) || ((strcmp(str, "lower") == 0)) || ((strcmp(str, "digit") == 0)) || ((strcmp(str, "alnum") == 0)) || ((strcmp(str, "xdigit") == 0)) || ((strcmp(str, "space") == 0)) || ((strcmp(str, "print") == 0)) || ((strcmp(str, "punct") == 0)) || ((strcmp(str, "graph") == 0)) || ((strcmp(str, "cntrl") == 0)) || ((strcmp(str, "blank") == 0)))
287,5478,0,2,2,0
288,5478,0,0,2,p == pend
289,5478,0,0,2,translate
290,5480,0,0,2,p == pend
291,5482,0,4,2,ch < 1 << 8
292,5484,0,4,2,(is_alnum && (1 && ((*__ctype_b_loc())[(int)((ch))] & (unsigned short)_ISalnum))) || (is_alpha && (1 && ((*__ctype_b_loc())[(int)((ch))] & (unsigned short)_ISalpha))) || (is_blank && (1 && ((*__ctype_b_loc())[(int)((ch))] & (unsigned short)_ISblank))) || (is_cntrl && (1 && ((*__ctype_b_loc())[(int)((ch))] & (unsigned short)_IScntrl))) || (is_digit && (1 && ((*__ctype_b_loc())[(int)((ch))] & (unsigned short)_ISdigit))) || (is_graph && (1 && ((*__ctype_b_loc())[(int)((ch))] & (unsigned short)_ISgraph))) || (is_lower && (1 && ((*__ctype_b_loc())[(int)((ch))] & (unsigned short)_ISlower))) || (is_print && (1 && ((*__ctype_b_loc())[(int)((ch))] & (unsigned short)_ISprint))) || (is_punct && (1 && ((*__ctype_b_loc())[(int)((ch))] & (unsigned short)_ISpunct))) || (is_space && (1 && ((*__ctype_b_loc())[(int)((ch))] & (unsigned short)_ISspace))) || (is_upper && (1 && ((*__ctype_b_loc())[(int)((ch))] & (unsigned short)_ISupper))) || (is_xdigit && (1 && ((*__ctype_b_loc())[(int)((ch
0,0,0,0,0,
0,0,0,0,0,
0,0,0,0,0,
293,5599,0,0,2,c1--
294,5615,0,0,2,(int)b[-1] > 0 && b[b[-1] - 1] == 0
295,5622,0,0,1,case '('
296,5623,0,0,2,syntax & ((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)
297,5629,0,0,1,case ')'
298,5630,0,2,2,syntax & ((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)
299,5636,0,4,1,case '\n'
300,5637,0,4,2,syntax & ((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)
301,5643,0,2,1,case '|'
302,5644,0,0,2,syntax & ((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)
303,5650,0,0,1,case '{'
304,5651,0,0,2,syntax & ((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) && syntax & (((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)
305,5657,0,0,1,case '\\'
306,5658,0,0,2,p == pend
307,5663,0,0,2,0
308,5663,0,0,2,p == pend
309,5667,0,2,1,case '('
310,5668,4,2,2,syntax & ((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)
311,5675,4,4,2,(compile_stack.avail == compile_stack.size)
312,5679,0,8,2,compile_stack.stack == ((void *)0)
313,5702,0,8,2,regnum <= 255
314,5705,0,8,2,0
315,5705,0,8,2,b - bufp->buffer + (3) > bufp->allocated
316,5705,0,4,2,0
317,5705,0,0,2,bufp->allocated == (1L << 16)
318,5705,0,0,2,bufp->allocated > (1L << 16)
319,5705,0,0,2,bufp->buffer == ((void *)0)
320,5709,2,2,2,old_buffer != bufp->buffer
321,5709,2,4,2,fixup_alt_jump
322,5709,0,4,2,laststart
323,5709,0,2,2,pending_exact
324,5724,0,2,1,case ')'
325,5725,2,0,2,syntax & ((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)
326,5727,0,2,2,(compile_stack.avail == 0)
327,5728,0,2,2,syntax & ((((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)
328,5734,0,2,2,fixup_alt_jump
329,5739,2,2,2,0
330,5739,0,2,2,b - bufp->buffer + (1) > bufp->allocated
331,5739,0,2,2,0
332,5739,0,2,2,bufp->allocated == (1L << 16)
333,5739,0,2,2,bufp->allocated > (1L << 16)
334,5739,12,0,2,bufp->buffer == ((void *)0)
335,5743,0,12,2,old_buffer != bufp->buffer
336,5743,0,12,2,fixup_alt_jump
337,5743,0,12,2,laststart
338,5743,2,10,2,pending_exact
339,5751,2,0,2,(compile_stack.avail == 0)
340,5752,0,2,2,syntax & ((((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)
341,5781,0,2,2,this_group_regnum <= 255
342,5787,0,2,2,0
343,5787,0,2,2,b - bufp->buffer + (3) > bufp->allocated
344,5787,0,2,2,0
345,5787,512,0,2,bufp->allocated == (1L << 16)
346,5787,62,450,2,bufp->allocated > (1L << 16)
347,5787,0,0,2,bufp->buffer == ((void *)0)
348,5791,40,2,2,old_buffer != bufp->buffer
349,5791,48,2,2,fixup_alt_jump
350,5791,0,0,2,laststart
351,5791,0,0,2,pending_exact
352,5798,0,0,1,case '|'
353,5799,0,0,2,syntax & (((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || syntax & ((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)
354,5802,0,0,2,syntax & (((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)
355,5807,0,0,2,b - bufp->buffer + (3) > bufp->allocated
356,5807,0,0,2,0
357,5807,0,0,2,bufp->allocated == (1L << 16)
358,5807,0,0,2,bufp->allocated > (1L << 16)
359,5807,0,0,2,bufp->buffer == ((void *)0)
360,5811,0,0,2,old_buffer != bufp->buffer
361,5811,0,0,2,fixup_alt_jump
362,5811,0,0,2,laststart
363,5811,0,0,2,pending_exact
364,5816,0,0,2,fixup_alt_jump
365,5823,0,0,2,b - bufp->buffer + (3) > bufp->allocated
366,5823,0,0,2,0
367,5823,0,0,2,bufp->allocated == (1L << 16)
368,5823,0,0,2,bufp->allocated > (1L << 16)
369,5823,0,0,2,bufp->buffer == ((void *)0)
370,5827,0,0,2,old_buffer != bufp->buffer
371,5827,0,0,2,fixup_alt_jump
372,5827,0,0,2,laststart
373,5827,0,0,2,pending_exact
374,5835,0,0,1,case '{'
375,5837,0,0,2,!(syntax & ((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) || ((syntax & ((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && (syntax & (((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) || (p - 2 == pattern && p == pend)
376,5853,0,0,2,p == pend
377,5855,0,0,2,syntax & (((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)
378,5861,0,0,2,p != pend
379,5861,0,0,2,0
380,5861,0,0,2,p == pend
381,5861,0,0,2,translate
382,5861,0,0,2,(1 && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISdigit))
383,5869,0,0,2,lower_bound < 0
384,5869,0,0,2,p == pend
385,5869,0,0,2,0
386,5869,0,0,2,p == pend
387,5869,0,0,2,translate
388,5871,0,0,2,c == ','
389,5873,0,0,2,p != pend
390,5873,0,0,2,0
391,5873,0,0,2,p == pend
392,5873,0,0,2,translate
393,5873,0,0,2,(1 && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISdigit))
394,5881,0,0,2,upper_bound < 0
395,5881,0,0,2,p == pend
396,5881,0,0,2,0
397,5881,0,0,2,p == pend
398,5881,0,0,2,translate
399,5882,0,0,2,upper_bound < 0
400,5888,0,0,2,lower_bound < 0 || upper_bound > ((1 << 15) - 1) || lower_bound > upper_bound
401,5891,0,0,2,syntax & (((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)
402,5897,0,0,2,!(syntax & (((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
403,5899,0,0,2,c != '\\'
404,5901,0,0,2,0
405,5901,0,0,2,p == pend
406,5901,0,0,2,translate
407,5904,0,0,2,c != '}'
408,5906,0,0,2,syntax & (((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)
409,5915,0,0,2,!laststart
410,5917,0,0,2,syntax & ((((((1) << 1) << 1) << 1) << 1) << 1)
411,5919,0,0,2,syntax & (((((1) << 1) << 1) << 1) << 1)
412,5928,0,0,2,upper_bound == 0
413,5930,0,0,2,b - bufp->buffer + (3) > bufp->allocated
414,5930,0,0,2,0
415,5930,0,0,2,bufp->allocated == (1L << 16)
416,5930,0,0,2,bufp->allocated > (1L << 16)
417,5930,0,0,2,bufp->buffer == ((void *)0)
418,5934,0,0,2,old_buffer != bufp->buffer
419,5934,0,0,2,fixup_alt_jump
420,5934,0,0,2,laststart
421,5934,0,0,2,pending_exact
422,5944,0,0,2,b - bufp->buffer + (nbytes) > bufp->allocated
423,5944,0,0,2,0
424,5944,0,0,2,bufp->allocated == (1L << 16)
425,5944,0,0,2,bufp->allocated > (1L << 16)
426,5944,0,0,2,bufp->buffer == ((void *)0)
427,5948,0,0,2,old_buffer != bufp->buffer
428,5948,0,0,2,fixup_alt_jump
429,5948,0,0,2,laststart
430,5948,0,0,2,pending_exact
431,5967,0,0,2,upper_bound > 1
432,6004,0,0,2,0
433,6004,0,0,2,p == pend
434,6004,0,0,2,translate
435,6006,0,0,2,!(syntax & (((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
436,6008,0,0,2,p > pattern && p[-1] == '\\'
437,6013,0,0,1,case 'w'
438,6015,0,0,2,0
439,6015,0,0,2,b - bufp->buffer + (1) > bufp->allocated
440,6015,0,0,2,0
441,6015,0,0,2,bufp->allocated == (1L << 16)
442,6015,0,0,2,bufp->allocated > (1L << 16)
443,6015,0,0,2,bufp->buffer == ((void *)0)
444,6019,0,0,2,old_buffer != bufp->buffer
445,6019,0,0,2,fixup_alt_jump
446,6019,0,0,2,laststart
447,6019,0,0,2,pending_exact
448,6023,0,0,1,case 'W'
449,6025,0,0,2,0
450,6025,0,0,2,b - bufp->buffer + (1) > bufp->allocated
451,6025,0,0,2,0
452,6025,0,0,2,bufp->allocated == (1L << 16)
453,6025,0,0,2,bufp->allocated > (1L << 16)
454,6025,0,0,2,bufp->buffer == ((void *)0)
455,6029,0,0,2,old_buffer != bufp->buffer
456,6029,0,0,2,fixup_alt_jump
457,6029,0,0,2,laststart
458,6029,0,0,2,pending_exact
459,6033,0,0,1,case '<'
460,6034,0,0,2,0
461,6034,0,0,2,b - bufp->buffer + (1) > bufp->allocated
462,6034,0,0,2,0
463,6034,0,0,2,bufp->allocated == (1L << 16)
464,6034,0,0,2,bufp->allocated > (1L << 16)
465,6034,0,0,2,bufp->buffer == ((void *)0)
466,6038,0,0,2,old_buffer != bufp->buffer
467,6038,0,0,2,fixup_alt_jump
468,6038,0,0,2,laststart
469,6038,0,0,2,pending_exact
470,6041,0,0,1,case '>'
471,6042,0,0,2,0
472,6042,0,0,2,b - bufp->buffer + (1) > bufp->allocated
473,6042,0,0,2,0
474,6042,0,0,2,bufp->allocated == (1L << 16)
475,6042,0,0,2,bufp->allocated > (1L << 16)
476,6042,0,0,2,bufp->buffer == ((void *)0)
477,6046,0,0,2,old_buffer != bufp->buffer
478,6046,0,0,2,fixup_alt_jump
479,6046,0,0,2,laststart
480,6046,0,0,2,pending_exact
481,6049,0,0,1,case 'b'
482,6050,0,0,2,0
483,6050,0,0,2,b - bufp->buffer + (1) > bufp->allocated
484,6050,0,0,2,0
485,6050,0,0,2,bufp->allocated == (1L << 16)
486,6050,0,0,2,bufp->allocated > (1L << 16)
487,6050,0,0,2,bufp->buffer == ((void *)0)
488,6054,0,0,2,old_buffer != bufp->buffer
489,6054,0,0,2,fixup_alt_jump
490,6054,0,0,2,laststart
491,6054,0,0,2,pending_exact
492,6057,0,0,1,case 'B'
493,6058,0,0,2,0
494,6058,0,0,2,b - bufp->buffer + (1) > bufp->allocated
495,6058,0,0,2,0
496,6058,0,0,2,bufp->allocated == (1L << 16)
497,6058,0,0,2,bufp->allocated > (1L << 16)
498,6058,0,0,2,bufp->buffer == ((void *)0)
499,6062,0,0,2,old_buffer != bufp->buffer
500,6062,0,0,2,fixup_alt_jump
501,6062,0,0,2,laststart
502,6062,0,0,2,pending_exact
503,6065,0,0,1,case '`'
504,6066,0,0,2,0
505,6066,0,0,2,b - bufp->buffer + (1) > bufp->allocated
506,6066,0,0,2,0
507,6066,0,0,2,bufp->allocated == (1L << 16)
508,6066,0,0,2,bufp->allocated > (1L << 16)
509,6066,0,0,2,bufp->buffer == ((void *)0)
510,6070,0,0,2,old_buffer != bufp->buffer
511,6070,0,0,2,fixup_alt_jump
512,6070,0,0,2,laststart
513,6070,0,0,2,pending_exact
514,6073,0,0,1,case '\''
515,6074,0,0,2,0
516,6074,0,0,2,b - bufp->buffer + (1) > bufp->allocated
517,6074,0,0,2,0
518,6074,0,0,2,bufp->allocated == (1L << 16)
519,6074,0,0,2,bufp->allocated > (1L << 16)
520,6074,0,0,2,bufp->buffer == ((void *)0)
521,6078,0,0,2,old_buffer != bufp->buffer
522,6078,0,0,2,fixup_alt_jump
523,6078,0,0,2,laststart
524,6078,0,0,2,pending_exact
525,6081,0,0,1,case '1'
526,6081,0,0,1,case '2'
527,6081,0,0,1,case '3'
528,6081,0,0,1,case '4'
529,6081,0,0,1,case '5'
530,6082,0,0,1,case '6'
531,6082,0,0,1,case '7'
532,6082,0,0,1,case '8'
533,6082,0,0,1,case '9'
534,6083,0,0,2,syntax & (((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)
535,6088,0,0,2,c1 > regnum
536,6092,0,0,2,group_in_compile_stack(compile_stack, c1)
537,6096,0,0,2,0
538,6096,0,0,2,b - bufp->buffer + (2) > bufp->allocated
539,6096,0,0,2,0
540,6096,0,0,2,bufp->allocated == (1L << 16)
541,6096,0,0,2,bufp->allocated > (1L << 16)
542,6096,0,0,2,bufp->buffer == ((void *)0)
543,6100,0,0,2,old_buffer != bufp->buffer
544,6100,0,0,2,fixup_alt_jump
545,6100,0,0,2,laststart
546,6100,0,0,2,pending_exact
547,6104,0,0,1,case '+'
548,6105,0,0,1,case '?'
549,6106,0,0,2,syntax & ((1) << 1)
550,6111,0,0,1,default
551,6122,0,0,1,default
552,6126,0,0,2,!pending_exact || pending_exact + *pending_exact + 1 != b || *pending_exact == (1 << 8) - 1 || *p == '*' || *p == '^' || ((syntax & ((1) << 1)) ? *p == '\\' && (p[1] == '+' || p[1] == '?') : (*p == '+' || *p == '?')) || ((syntax & ((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && ((syntax & (((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) ? *p == '{' : (p[0] == '\\' && p[1] == '{')))
553,6148,0,0,2,0
554,6148,0,0,2,b - bufp->buffer + (2) > bufp->allocated
555,6148,0,0,2,0
556,6148,0,0,2,bufp->allocated == (1L << 16)
557,6148,0,0,2,bufp->allocated > (1L << 16)
558,6148,0,0,2,bufp->buffer == ((void *)0)
559,6152,0,0,2,old_buffer != bufp->buffer
560,6152,0,0,2,fixup_alt_jump
561,6152,0,0,2,laststart
562,6152,0,0,2,pending_exact
563,6156,0,0,2,0
564,6156,0,0,2,b - bufp->buffer + (1) > bufp->allocated
565,6156,0,0,2,0
566,6156,0,0,2,bufp->allocated == (1L << 16)
567,6156,0,0,2,bufp->allocated > (1L << 16)
568,6156,0,0,2,bufp->buffer == ((void *)0)
569,6160,0,0,2,old_buffer != bufp->buffer
570,6160,0,0,2,fixup_alt_jump
571,6160,0,0,2,laststart
572,6160,0,0,2,pending_exact
573,6169,0,0,2,fixup_alt_jump
574,6172,0,0,2,!(compile_stack.avail == 0)
575,6194,0,0,2,0
576,6207,0,0,2,0
577,6208,0,0,2,0
578,6225,0,0,2,pfrom != loc
579,6244,0,0,2,pfrom != loc
580,6307,0,0,2,this_element >= 0
581,6310,0,0,2,compile_stack.stack[this_element].regnum == regnum
582,6328,0,0,2,p == pend
583,6339,0,0,2,range_start > range_end
584,6346,0,0,2,this_char <= range_end
585,6394,0,0,2,0
586,6402,0,0,2,fail_stack.stack == ((void *)0)
587,6411,0,0,2,p != pend || !(fail_stack.avail == 0)
588,6413,0,0,2,p == pend
589,6438,0,0,1,case duplicate
590,6446,0,0,1,case exactn
591,6451,0,0,1,case charset
592,6452,0,0,2,j >= 0
593,6453,0,0,2,p[j / 8] & (1 << (j % 8))
594,6458,0,0,1,case charset_not
595,6460,0,0,2,j < (1 << 8)
596,6463,0,0,2,j >= 0
597,6464,0,0,2,!(p[j / 8] & (1 << (j % 8)))
598,6469,0,0,1,case wordchar
599,6470,0,0,2,j < (1 << 8)
600,6471,0,0,2,re_syntax_table[j] == 1
601,6476,0,0,1,case notwordchar
602,6477,0,0,2,j < (1 << 8)
603,6478,0,0,2,re_syntax_table[j] != 1
604,6483,0,0,1,case anychar
605,6485,0,0,2,j < (1 << 8)
606,6489,0,0,2,!(bufp->syntax & (((((((1) << 1) << 1) << 1) << 1) << 1) << 1))
607,6494,2,0,2,bufp->can_be_null
608,6500,1,1,1,case no_op
609,6501,0,1,1,case begline
610,6502,0,1,1,case endline
611,6503,0,0,1,case begbuf
612,6504,0,0,1,case endbuf
613,6505,0,0,1,case wordbound
614,6506,0,0,1,case notwordbound
615,6507,0,0,1,case wordbeg
616,6508,0,0,1,case wordend
617,6509,0,0,1,case push_dummy_failure
618,6513,0,0,1,case jump_n
619,6514,0,2,1,case pop_failure_jump
620,6515,0,2,1,case maybe_pop_jump
621,6516,0,0,1,case jump
622,6517,0,0,1,case jump_past_alt
623,6518,0,0,1,case dummy_failure_jump
624,6519,0,0,2,0
625,6519,0,0,2,0
626,6521,0,0,2,j > 0
627,6529,0,1,2,(re_opcode_t)*p != on_failure_jump && (re_opcode_t)*p != succeed_n
628,6534,0,2,2,0
629,6534,0,2,2,0
630,6538,0,4,2,!(fail_stack.avail == 0) && fail_stack.stack[fail_stack.avail - 1] == p
631,6545,0,0,1,case on_failure_jump
632,6546,0,0,1,case on_failure_keep_string_jump
633,6548,29,2,2,0
634,6548,0,0,2,0
635,6550,0,0,2,p + j < pend
636,6552,0,0,2,!(((fail_stack.avail == fail_stack.size) && !((fail_stack).size > re_max_failures * ((num_regs - 1) * 3 + 4) ? 0 : ((fail_stack).stack = (fail_stack_elt_t *)(destination = (char *)__builtin_alloca(((fail_stack).size << 1) * sizeof(fail_stack_elt_t)) , memcpy((destination), ((fail_stack).stack), ((fail_stack).size * sizeof(fail_stack_elt_t))) , destination) , (fail_stack).stack == ((void *)0) ? 0 : ((fail_stack).size <<= 1 , 1)))) ? 0 : ((fail_stack).stack[(fail_stack).avail++] = p + j , 1))
637,6570,0,2,2,succeed_n_p
638,6572,0,2,2,0
639,6572,20,0,2,0
640,6579,0,0,1,case succeed_n
641,6584,0,0,2,0
642,6584,0,0,2,0
643,6585,0,0,2,k == 0
644,6594,0,0,1,case set_number_at
645,6599,0,0,1,case start_memory
646,6600,0,0,1,case stop_memory
647,6605,0,0,1,default
648,6632,0,0,2,num_regs
649,6684,0,0,2,startpos < 0 || startpos > total_size
650,6689,0,0,2,endpos < -1
651,6691,0,0,2,endpos > total_size
652,6696,0,0,2,bufp->used > 0 && (re_opcode_t)bufp->buffer[0] == begbuf && range > 0
653,6698,0,0,2,startpos > 0
654,6705,0,0,2,fastmap && !bufp->fastmap_accurate
655,6706,0,0,2,re_compile_fastmap(bufp) == -2
656,6710,0,0,2,1
657,6716,0,0,2,fastmap && startpos < total_size && !bufp->can_be_null
658,6718,0,0,2,range > 0
659,6724,0,0,2,startpos < size1 && startpos + range >= size1
660,6731,0,0,2,translate
661,6732,0,0,2,range > lim && !fastmap[(unsigned char)translate[(unsigned char)*d++]]
662,6737,0,0,2,range > lim && !fastmap[(unsigned char)*d++]
663,6748,0,0,2,!fastmap[(unsigned char)(translate ? translate[(unsigned char)(c)] : (c))]
664,6754,0,0,2,range >= 0 && startpos == total_size && fastmap && !bufp->can_be_null
665,6760,0,0,2,val >= 0
666,6763,0,0,2,val == -2
667,6767,0,0,2,!range
668,6769,0,0,2,range > 0
669,6898,0,0,2,0
670,6906,0,0,2,fail_stack.stack == ((void *)0)
671,6917,0,0,2,bufp->re_nsub
672,7001,0,0,2,!(regstart && regend && old_regstart && old_regend && reg_info && best_regstart && best_regend && reg_dummy && reg_info_dummy)
673,7017,0,0,2,pos < 0 || pos > size1 + size2
674,7034,0,0,2,mcnt < num_regs
675,7047,0,0,2,size2 == 0 && string1 != ((void *)0)
676,7062,0,0,2,stop <= size1
677,7079,0,0,2,size1 > 0 && pos <= size1
678,7099,0,0,2,1
679,7103,0,0,2,p == pend
680,7109,0,0,2,d != end_match_2
681,7113,0,0,2,!(fail_stack.avail == 0)
682,7119,0,0,2,!best_regs_set || (same_str_p && d > match_end) || (!same_str_p && !(dend == end_match_1))
683,7128,0,0,2,mcnt < num_regs
684,7138,0,0,2,best_regs_set
685,7152,0,0,2,mcnt < num_regs
686,7163,0,0,2,regs && !bufp->no_sub
687,7166,0,0,2,bufp->regs_allocated == 0
688,7173,0,0,2,regs->start == ((void *)0) || regs->end == ((void *)0)
689,7185,0,0,2,bufp->regs_allocated == 1
690,7189,0,0,2,regs->num_regs < num_regs + 1
691,7194,0,0,2,regs->start == ((void *)0) || regs->end == ((void *)0)
692,7216,0,0,2,regs->num_regs > 0
693,7225,0,0,2,mcnt < ((num_regs) < (regs->num_regs) ? (num_regs) : (regs->num_regs))
694,7227,0,0,2,((regstart[mcnt]) == ((char *)-1)) || ((regend[mcnt]) == ((char *)-1))
695,7241,0,0,2,mcnt < regs->num_regs
696,7277,0,0,1,case no_op
697,7285,0,0,1,case exactn
698,7291,0,0,2,translate
699,7293,0,0,2,--mcnt
700,7295,0,0,2,d == dend
701,7295,0,0,2,dend == end_match_2
702,7296,0,0,2,translate[(unsigned char)*d++] != (char)*p++
703,7303,0,0,2,--mcnt
704,7305,0,0,2,d == dend
705,7305,0,0,2,dend == end_match_2
706,7306,0,0,2,*d++ != (char)*p++
707,7310,0,0,2,0
708,7310,0,0,2,r <= highest_active_reg
709,7315,0,0,1,case anychar
710,7318,0,0,2,d == dend
711,7318,0,0,2,dend == end_match_2
712,7320,0,0,2,(!(bufp->syntax & (((((((1) << 1) << 1) << 1) << 1) << 1) << 1)) && (translate ? translate[(unsigned char)(*d)] : (*d)) == '\n') || (bufp->syntax & ((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) && (translate ? translate[(unsigned char)(*d)] : (*d)) == '\x00')
713,7324,0,0,2,0
714,7324,0,0,2,r <= highest_active_reg
715,7330,0,0,1,case charset
716,7331,0,0,1,case charset_not
717,7338,0,0,2,d == dend
718,7338,0,0,2,dend == end_match_2
719,7343,0,0,2,c < (unsigned int)(*p * 8) && p[1 + c / 8] & (1 << (c % 8))
720,7349,0,0,2,!not
721,7351,0,0,2,0
722,7351,0,0,2,r <= highest_active_reg
723,7362,0,0,1,case start_memory
724,7368,0,0,2,((reg_info[*p]).bits.match_null_string_p) == 3
725,7394,0,0,2,lowest_active_reg == ((1 << 8) + 1)
726,7405,0,0,1,case stop_memory
727,7427,0,0,2,lowest_active_reg == highest_active_reg
728,7438,0,0,2,r > 0 && !((reg_info[r]).bits.is_active)
729,7441,0,0,2,r == 0
730,7455,0,0,2,(!((reg_info[*p]).bits.matched_something) || (re_opcode_t)p[-3] == start_memory) && (p + 2) < pend
731,7465,0,0,1,case jump_n
732,7467,0,0,1,case pop_failure_jump
733,7468,0,0,1,case maybe_pop_jump
734,7469,0,0,1,case jump
735,7470,0,0,1,case dummy_failure_jump
736,7471,0,0,2,0
737,7471,0,0,2,0
738,7472,0,0,2,is_a_jump_n
739,7476,0,0,1,default
740,7486,0,0,2,mcnt < 0 && (re_opcode_t)*p1 == on_failure_jump && (re_opcode_t)p1[3] == start_memory && p1[4] == *p
741,7490,0,0,2,((reg_info[*p]).bits.ever_matched_something)
742,7497,0,0,2,r < *p + *(p + 1)
743,7502,0,0,2,(int)old_regend[r] >= (int)regstart[r]
744,7507,0,0,2,0
745,7507,0,0,2,0
746,7508,0,0,2,0
747,7508,0,0,2,((fail_stack).size - (fail_stack).avail) < ((highest_active_reg - lowest_active_reg + 1) * 3 + 4)
748,7508,0,0,2,!((fail_stack).size > re_max_failures * ((num_regs - 1) * 3 + 4) ? 0 : ((fail_stack).stack = (fail_stack_elt_t *)(destination = (char *)__builtin_alloca(((fail_stack).size << 1) * sizeof(fail_stack_elt_t)) , memcpy((destination), ((fail_stack).stack), ((fail_stack).size * sizeof(fail_stack_elt_t))) , destination) , (fail_stack).stack == ((void *)0) ? 0 : ((fail_stack).size <<= 1 , 1)))
749,7520,0,0,2,this_reg <= highest_active_reg
750,7533,0,0,1,case duplicate
751,7540,0,0,2,((regstart[regno]) == ((char *)-1)) || ((regend[regno]) == ((char *)-1))
752,7554,0,0,2,1
753,7558,0,0,2,d2 == dend2
754,7560,0,0,2,dend2 == end_match_2
755,7561,0,0,2,dend2 == regend[regno]
756,7568,0,0,2,d2 == dend2
757,7571,0,0,2,d == dend
758,7571,0,0,2,dend == end_match_2
759,7578,0,0,2,mcnt > dend2 - d2
760,7583,0,0,2,translate ? bcmp_translate(d, d2, mcnt, translate) : memcmp((d), (d2), (mcnt))
761,7596,0,0,1,case begline
762,7599,0,0,2,((d) == (size1 ? string1 : string2) || !size2)
763,7601,0,0,2,!bufp->not_bol
764,7603,0,0,2,d[-1] == '\n' && bufp->newline_anchor
765,7612,0,0,1,case endline
766,7615,0,0,2,((d) == end2)
767,7617,0,0,2,!bufp->not_eol
768,7621,0,0,2,(d == end1 ? *string2 : *d) == '\n' && bufp->newline_anchor
769,7630,0,0,1,case begbuf
770,7632,0,0,2,((d) == (size1 ? string1 : string2) || !size2)
771,7638,0,0,1,case endbuf
772,7640,0,0,2,((d) == end2)
773,7644,0,0,1,case on_failure_keep_string_jump
774,7647,0,0,2,0
775,7647,0,0,2,0
776,7650,0,0,2,0
777,7650,0,0,2,((fail_stack).size - (fail_stack).avail) < ((highest_active_reg - lowest_active_reg + 1) * 3 + 4)
778,7650,0,0,2,!((fail_stack).size > re_max_failures * ((num_regs - 1) * 3 + 4) ? 0 : ((fail_stack).stack = (fail_stack_elt_t *)(destination = (char *)__builtin_alloca(((fail_stack).size << 1) * sizeof(fail_stack_elt_t)) , memcpy((destination), ((fail_stack).stack), ((fail_stack).size * sizeof(fail_stack_elt_t))) , destination) , (fail_stack).stack == ((void *)0) ? 0 : ((fail_stack).size <<= 1 , 1)))
779,7662,0,0,2,this_reg <= highest_active_reg
780,7669,0,0,1,case on_failure_jump
781,7673,0,0,2,0
782,7673,0,0,2,0
783,7682,0,0,2,p1 < pend && (re_opcode_t)*p1 == no_op
784,7685,0,0,2,p1 < pend && (re_opcode_t)*p1 == start_memory
785,7692,0,0,2,lowest_active_reg == ((1 << 8) + 1)
786,7697,0,0,2,0
787,7697,0,0,2,((fail_stack).size - (fail_stack).avail) < ((highest_active_reg - lowest_active_reg + 1) * 3 + 4)
788,7697,0,0,2,!((fail_stack).size > re_max_failures * ((num_regs - 1) * 3 + 4) ? 0 : ((fail_stack).stack = (fail_stack_elt_t *)(destination = (char *)__builtin_alloca(((fail_stack).size << 1) * sizeof(fail_stack_elt_t)) , memcpy((destination), ((fail_stack).stack), ((fail_stack).size * sizeof(fail_stack_elt_t))) , destination) , (fail_stack).stack == ((void *)0) ? 0 : ((fail_stack).size <<= 1 , 1)))
789,7709,0,0,2,this_reg <= highest_active_reg
790,7715,0,0,1,case maybe_pop_jump
791,7716,0,0,2,0
792,7716,0,0,2,0
793,7721,0,0,2,p2 + 2 < pend && ((re_opcode_t)*p2 == stop_memory || (re_opcode_t)*p2 == start_memory)
794,7727,0,0,2,p2 == pend
795,7737,0,0,2,(re_opcode_t)*p2 == exactn || (bufp->newline_anchor && (re_opcode_t)*p2 == endline)
796,7747,0,0,2,(re_opcode_t)p1[3] == exactn && p1[5] != c
797,7754,0,0,2,(re_opcode_t)p1[3] == charset || (re_opcode_t)p1[3] == charset_not
798,7759,0,0,2,c < (unsigned char)(p1[4] * 8) && p1[5 + c / 8] & (1 << (c % 8))
799,7765,0,0,2,!not
800,7774,0,0,2,(re_opcode_t)p[-1] != pop_failure_jump
801,7781,0,0,1,case pop_failure_jump
802,7793,0,0,2,string_temp != ((void *)0)
803,7797,0,0,2,this_reg >= dummy_low_reg
804,7805,0,0,1,case jump
805,7807,0,0,2,0
806,7807,0,0,2,0
807,7816,0,0,1,case jump_past_alt
808,7826,0,0,1,case dummy_failure_jump
809,7830,0,0,2,0
810,7830,0,0,2,((fail_stack).size - (fail_stack).avail) < ((highest_active_reg - lowest_active_reg + 1) * 3 + 4)
811,7830,0,0,2,!((fail_stack).size > re_max_failures * ((num_regs - 1) * 3 + 4) ? 0 : ((fail_stack).stack = (fail_stack_elt_t *)(destination = (char *)__builtin_alloca(((fail_stack).size << 1) * sizeof(fail_stack_elt_t)) , memcpy((destination), ((fail_stack).stack), ((fail_stack).size * sizeof(fail_stack_elt_t))) , destination) , (fail_stack).stack == ((void *)0) ? 0 : ((fail_stack).size <<= 1 , 1)))
812,7842,0,0,2,this_reg <= highest_active_reg
813,7851,0,0,1,case push_dummy_failure
814,7855,0,0,2,0
815,7855,0,0,2,((fail_stack).size - (fail_stack).avail) < ((highest_active_reg - lowest_active_reg + 1) * 3 + 4)
816,7855,0,0,2,!((fail_stack).size > re_max_failures * ((num_regs - 1) * 3 + 4) ? 0 : ((fail_stack).stack = (fail_stack_elt_t *)(destination = (char *)__builtin_alloca(((fail_stack).size << 1) * sizeof(fail_stack_elt_t)) , memcpy((destination), ((fail_stack).stack), ((fail_stack).size * sizeof(fail_stack_elt_t))) , destination) , (fail_stack).stack == ((void *)0) ? 0 : ((fail_stack).size <<= 1 , 1)))
817,7867,0,0,2,this_reg <= highest_active_reg
818,7872,0,0,1,case succeed_n
819,7873,0,0,2,0
820,7878,0,0,2,mcnt > 0
821,7882,0,0,2,0
822,7882,0,0,2,0
823,7885,0,0,2,mcnt == 0
824,7894,0,0,1,case jump_n
825,7895,0,0,2,0
826,7899,0,0,2,mcnt
827,7902,0,0,2,0
828,7910,0,0,1,case set_number_at
829,7914,0,0,2,0
830,7914,0,0,2,0
831,7916,0,0,2,0
832,7916,0,0,2,0
833,7918,0,0,2,0
834,7922,0,0,1,case wordbound
835,7924,0,0,2,(((d) == (size1 ? string1 : string2) || !size2) || ((d) == end2) || (re_syntax_table[(d - 1) == end1 ? *string2 : (d - 1) == string2 - 1 ? *(end1 - 1) : *(d - 1)] == 1) != (re_syntax_table[(d) == end1 ? *string2 : (d) == string2 - 1 ? *(end1 - 1) : *(d)] == 1))
836,7928,0,0,1,case notwordbound
837,7930,0,0,2,(((d) == (size1 ? string1 : string2) || !size2) || ((d) == end2) || (re_syntax_table[(d - 1) == end1 ? *string2 : (d - 1) == string2 - 1 ? *(end1 - 1) : *(d - 1)] == 1) != (re_syntax_table[(d) == end1 ? *string2 : (d) == string2 - 1 ? *(end1 - 1) : *(d)] == 1))
838,7934,0,0,1,case wordbeg
839,7936,0,0,2,(re_syntax_table[(d) == end1 ? *string2 : (d) == string2 - 1 ? *(end1 - 1) : *(d)] == 1) && (((d) == (size1 ? string1 : string2) || !size2) || !(re_syntax_table[(d - 1) == end1 ? *string2 : (d - 1) == string2 - 1 ? *(end1 - 1) : *(d - 1)] == 1))
840,7940,0,0,1,case wordend
841,7942,0,0,2,!((d) == (size1 ? string1 : string2) || !size2) && (re_syntax_table[(d - 1) == end1 ? *string2 : (d - 1) == string2 - 1 ? *(end1 - 1) : *(d - 1)] == 1) && (!(re_syntax_table[(d) == end1 ? *string2 : (d) == string2 - 1 ? *(end1 - 1) : *(d)] == 1) || ((d) == end2))
842,7947,0,0,1,case wordchar
843,7949,0,0,2,d == dend
844,7949,0,0,2,dend == end_match_2
845,7950,0,0,2,!(re_syntax_table[(d) == end1 ? *string2 : (d) == string2 - 1 ? *(end1 - 1) : *(d)] == 1)
846,7952,0,0,2,0
847,7952,0,0,2,r <= highest_active_reg
848,7956,0,0,1,case notwordchar
849,7958,0,0,2,d == dend
850,7958,0,0,2,dend == end_match_2
851,7959,0,0,2,(re_syntax_table[(d) == end1 ? *string2 : (d) == string2 - 1 ? *(end1 - 1) : *(d)] == 1)
852,7961,0,0,2,0
853,7961,0,0,2,r <= highest_active_reg
854,7966,0,0,1,default
855,7974,0,0,2,!(fail_stack.avail == 0)
856,7977,0,0,2,string_temp != ((void *)0)
857,7981,0,0,2,this_reg >= lowest_active_reg
858,7986,0,0,2,!p
859,7991,0,0,2,p < pend
860,7999,0,0,1,case jump_n
861,8001,0,0,1,case maybe_pop_jump
862,8002,0,0,1,case pop_failure_jump
863,8003,0,0,1,case jump
864,8005,0,0,2,0
865,8005,0,0,2,0
866,8008,0,0,2,(is_a_jump_n && (re_opcode_t)*p1 == succeed_n) || (!is_a_jump_n && (re_opcode_t)*p1 == on_failure_jump)
867,8013,0,0,1,default
868,8018,0,0,2,d >= string1 && d <= end1
869,8025,0,0,2,best_regs_set
870,8050,0,0,2,p1 < end
871,8059,0,0,1,case on_failure_jump
872,8061,0,0,2,0
873,8061,0,0,2,0
874,8066,0,0,2,mcnt >= 0
875,8069,0,0,2,(re_opcode_t)p1[mcnt - 3] == jump_past_alt
876,8075,0,0,2,!alt_match_null_string_p(p1, p1 + mcnt - 3, reg_info)
877,8085,0,0,2,(re_opcode_t)*p1 != on_failure_jump
878,8091,0,0,2,0
879,8091,0,0,2,0
880,8092,0,0,2,(re_opcode_t)p1[mcnt - 3] != jump_past_alt
881,8103,0,0,2,0
882,8105,0,0,2,!alt_match_null_string_p(p1, p1 + mcnt, reg_info)
883,8113,0,0,1,case stop_memory
884,8119,0,0,1,default
885,8120,0,0,2,!common_op_match_null_string_p(&p1, end, reg_info)
886,8141,0,0,2,p1 < end
887,8149,0,0,1,case on_failure_jump
888,8151,0,0,2,0
889,8151,0,0,2,0
890,8155,0,0,1,default
891,8156,0,0,2,!common_op_match_null_string_p(&p1, end, reg_info)
892,8182,0,0,1,case no_op
893,8183,0,0,1,case begline
894,8184,0,0,1,case endline
895,8185,0,0,1,case begbuf
896,8186,0,0,1,case endbuf
897,8187,0,0,1,case wordbeg
898,8188,0,0,1,case wordend
899,8189,0,0,1,case wordbound
900,8190,0,0,1,case notwordbound
901,8198,0,0,1,case start_memory
902,8206,0,0,2,((reg_info[reg_no]).bits.match_null_string_p) == 3
903,8209,0,0,2,!ret
904,8214,0,0,1,case jump
905,8215,0,0,2,0
906,8215,0,0,2,0
907,8216,0,0,2,mcnt >= 0
908,8222,0,0,1,case succeed_n
909,8225,0,0,2,0
910,8225,0,0,2,0
911,8227,0,0,2,mcnt == 0
912,8230,0,0,2,0
913,8230,0,0,2,0
914,8237,0,0,1,case duplicate
915,8238,0,0,2,!((reg_info[*p1]).bits.match_null_string_p)
916,8242,0,0,1,case set_number_at
917,8245,0,0,1,default
918,8265,0,0,2,len
919,8267,0,0,2,translate[*p1++] != translate[*p2++]
920,8320,0,0,2,cflags & (1 << 1)
921,8325,0,0,2,preg->translate == ((void *)0)
922,8333,0,0,2,i < 256
923,8352,0,0,2,cflags & ((1 << 1) << 1)
924,8370,0,0,2,ret == REG_ERPAREN
925,8399,0,0,2,want_reg_info
926,8404,0,0,2,regs.start == ((void *)0) || regs.end == ((void *)0)
927,8422,0,0,2,want_reg_info
928,8424,0,0,2,ret >= 0
929,8428,0,0,2,r < nmatch
930,8458,0,0,2,errcode < 0 || errcode >= (sizeof (re_error_msg) / sizeof (re_error_msg[0]))
931,8470,0,0,2,!msg
932,8475,0,0,2,errbuf_size != 0
933,8477,0,0,2,msg_size > errbuf_size
934,8496,0,0,2,preg->buffer != ((void *)0)
935,8511,0,0,2,preg->fastmap != ((void *)0)
936,8524,0,0,2,preg->translate != ((void *)0)
937,8776,0,0,2,!r
938,8788,0,0,2,!r
939,8801,0,0,2,!r
940,8837,0,0,2,i < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int)))
941,8847,0,0,2,i < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int)))
942,8857,0,0,2,i < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int)))
943,8868,0,0,2,i < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int)))
944,8869,0,0,2,s1[i] != s2[i]
945,8884,0,0,2,i < dfa->cindex
946,8885,0,0,2,equal(s, dfa->charclasses[i])
947,8887,0,0,2,(dfa->cindex) >= (dfa->calloc)
948,8887,0,0,2,(dfa->cindex) >= (dfa->calloc)
949,9052,0,0,2,lexleft < len
950,9071,0,0,2,i < 2
951,9073,0,0,2,!lexleft
952,9073,0,0,2,0 != 0
953,9076,0,0,1,case '\\'
954,9077,0,0,2,backslash
955,9079,0,0,2,lexleft == 0
956,9084,0,0,1,case '^'
957,9085,0,0,2,backslash
958,9087,0,0,2,syntax_bits & ((((1) << 1) << 1) << 1) || lasttok == END || lasttok == LPAREN || lasttok == OR
959,9094,0,0,1,case '$'
960,9095,0,0,2,backslash
961,9097,0,0,2,syntax_bits & ((((1) << 1) << 1) << 1) || lexleft == 0 || (syntax_bits & ((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == ')' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')') || (syntax_bits & ((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) ? lexleft > 0 && *lexptr == '|' : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|') || ((syntax_bits & ((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) && lexleft > 0 && *lexptr == '\n')
962,9110,0,0,1,case '1'
963,9111,0,0,1,case '2'
964,9112,0,0,1,case '3'
965,9113,0,0,1,case '4'
966,9114,0,0,1,case '5'
967,9115,0,0,1,case '6'
968,9116,0,0,1,case '7'
969,9117,0,0,1,case '8'
970,9118,0,0,1,case '9'
971,9119,0,0,2,backslash && !(syntax_bits & (((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
972,9126,0,0,1,case '<'
973,9127,0,0,2,backslash
974,9131,0,0,1,case '>'
975,9132,0,0,2,backslash
976,9136,0,0,1,case 'b'
977,9137,0,0,2,backslash
978,9141,0,0,1,case 'B'
979,9142,0,0,2,backslash
980,9146,0,0,1,case '?'
981,9147,0,0,2,syntax_bits & (((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)
982,9149,0,0,2,backslash != ((syntax_bits & ((1) << 1)) != 0)
983,9151,0,0,2,!(syntax_bits & (((((1) << 1) << 1) << 1) << 1)) && laststart
984,9155,0,0,1,case '*'
985,9156,0,0,2,backslash
986,9158,0,0,2,!(syntax_bits & (((((1) << 1) << 1) << 1) << 1)) && laststart
987,9162,0,0,1,case '+'
988,9163,0,0,2,syntax_bits & (((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)
989,9165,0,0,2,backslash != ((syntax_bits & ((1) << 1)) != 0)
990,9167,0,0,2,!(syntax_bits & (((((1) << 1) << 1) << 1) << 1)) && laststart
991,9171,0,3,1,case '{'
992,9172,0,40,2,!(syntax_bits & ((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
993,9174,0,51,2,backslash != ((syntax_bits & (((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0)
994,9182,0,34,2,!lexleft
995,9182,0,3,2,"unfinished repeat count" != 0
996,9183,0,0,2,(1 && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISdigit))
997,9194,0,0,2,1
998,9196,1,1,2,!lexleft
999,9196,0,8,2,"unfinished repeat count" != 0
1000,9197,0,1,2,!(1 && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISdigit))
1001,9210,2,1,2,c != ','
1002,9212,1,2,2,c == ','
1003,9213,0,5,2,1
1004,9215,3,0,2,!lexleft
1005,9215,5,2,2,"unfinished repeat count" != 0
1006,9216,4,4,2,!(1 && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISdigit))
1007,9230,1,3,2,!(syntax_bits & (((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
1008,9232,0,1,2,c != '\\'
1009,9234,0,0,2,!lexleft
1010,9234,0,0,2,"unfinished repeat count" != 0
1011,9236,0,0,2,c != '}'
1012,9241,0,0,1,case '|'
1013,9242,0,0,2,syntax_bits & (((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)
1014,9244,0,0,2,backslash != ((syntax_bits & ((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0)
1015,9249,0,0,1,case '\n'
1016,9250,0,0,2,syntax_bits & (((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) || backslash || !(syntax_bits & ((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))
1017,9257,0,0,1,case '('
1018,9258,0,0,2,backslash != ((syntax_bits & ((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0)
1019,9264,0,0,1,case ')'
1020,9265,0,0,2,backslash != ((syntax_bits & ((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0)
1021,9267,0,0,2,parens == 0 && syntax_bits & ((((((((((((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)
1022,9273,0,0,1,case '.'
1023,9274,0,0,2,backslash
1024,9278,0,0,2,!(syntax_bits & (((((((1) << 1) << 1) << 1) << 1) << 1) << 1))
1025,9280,0,0,2,syntax_bits & ((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)
1026,9285,0,0,1,case 'w'
1027,9286,0,0,1,case 'W'
1028,9287,0,0,2,!backslash
1029,9290,0,0,2,c2 < (1 << 8)
1030,9291,0,0,2,(1 && ((*__ctype_b_loc())[(int)((c2))] & (unsigned short)_ISalnum))
1031,9301,0,0,2,c == 'W'
1032,9306,0,0,1,case '['
1033,9307,0,0,2,backslash
1034,9310,0,0,2,!lexleft
1035,9310,0,0,2,"Unbalanced [" != 0
1036,9311,0,0,2,c == '^'
1037,9313,0,0,2,!lexleft
1038,9313,0,0,2,"Unbalanced [" != 0
1039,9318,0,0,2,(c = c1) != ']'
1040,9326,0,0,2,c == '[' && (syntax_bits & (((1) << 1) << 1))
1041,9327,0,0,2,prednames[c1].name
1042,9328,1,0,2,looking_at(prednames[c1].name)
1043,9330,0,1,2,c2 < (1 << 8)
1044,9331,0,1,2,(*prednames[c1].pred)(c2)
1045,9335,0,1,2,!lexleft
1046,9335,0,0,2,"Unbalanced [" != 0
1047,9338,0,0,2,c == '\\' && (syntax_bits & (1))
1048,9339,0,0,2,!lexleft
1049,9339,0,0,2,"Unbalanced [" != 0
1050,9340,0,0,2,!lexleft
1051,9340,0,0,2,"Unbalanced [" != 0
1052,9341,0,0,2,c1 == '-'
1053,9343,0,0,2,!lexleft
1054,9343,0,0,2,"Unbalanced [" != 0
1055,9344,0,0,2,c2 == ']'
1056,9354,0,0,2,c2 == '\\' && (syntax_bits & (1))
1057,9356,0,0,2,!lexleft
1058,9356,0,0,2,"Unbalanced [" != 0
1059,9357,0,0,2,!lexleft
1060,9357,0,0,2,"Unbalanced [" != 0
1061,9362,0,0,2,c <= c2
1062,9365,0,0,2,case_fold
1063,9366,0,0,2,(1 && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper))
1064,9376,0,0,2,(1 && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISlower))
1065,9392,0,0,2,invert
1066,9395,0,0,2,syntax_bits & (((((((((1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)
1067,9401,0,0,1,default
1068,9404,0,0,2,case_fold && (1 && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalpha))
1069,9416,0,0,2,((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISupper)
1070,9454,0,0,2,(dfa->tindex) >= (dfa->talloc)
1071,9454,0,0,2,(dfa->tindex) >= (dfa->talloc)
1072,9459,0,0,1,case QMARK
1073,9460,0,0,1,case STAR
1074,9461,0,0,1,case PLUS
1075,9464,0,0,1,case CAT
1076,9465,0,0,1,case OR
1077,9466,0,0,1,case ORTOP
1078,9470,0,0,1,default
1079,9472,0,0,1,case EMPTY
1080,9476,0,0,2,depth > dfa->depth
1081,9488,0,0,2,(tok >= 0 && tok < (1 << 8)) || tok >= CSET || tok == BACKREF || tok == BEGLINE || tok == ENDLINE || tok == BEGWORD || tok == ENDWORD || tok == LIMWORD || tok == NOTLIMWORD
1082,9495,0,0,2,tok == LPAREN
1083,9499,0,0,2,tok != RPAREN
1084,9515,0,0,1,default
1085,9517,0,0,1,case QMARK
1086,9518,2,0,1,case STAR
1087,9519,2,2,1,case PLUS
1088,9521,0,4,1,case CAT
1089,9522,0,2,1,case OR
1090,9523,0,2,1,case ORTOP
1091,9536,0,2,2,i < ntokens
1092,9546,0,0,2,tok == QMARK || tok == STAR || tok == PLUS || tok == REPMN
1093,9547,0,2,2,tok == REPMN
1094,9551,2,2,2,maxrep == 0
1095,9553,0,2,2,minrep == 0
1096,9555,2,3,2,i < minrep
1097,9560,0,0,2,i < maxrep
1098,9579,62,450,2,tok != RPAREN && tok != OR && tok >= 0
1099,9591,0,2,2,tok == OR
1100,9595,0,0,2,toplevel
1101,9619,0,0,2,!syntax_bits_set
1102,9627,0,2,2,tok != END
1103,9633,0,0,2,d->nregexps
1104,9649,0,0,2,i < src->nelem
1105,9666,0,2,2,i < s->nelem && p.strchr < s->elems[i].strchr
1106,9668,0,0,2,i < s->nelem && p.strchr == s->elems[i].strchr
1107,9674,2,0,2,i < s->nelem
1108,9694,0,2,2,i < s1->nelem && j < s2->nelem
1109,9695,0,0,2,s1->elems[i].strchr > s2->elems[j].strchr
1110,9697,0,2,2,s1->elems[i].strchr < s2->elems[j].strchr
1111,9704,0,2,2,i < s1->nelem
1112,9706,0,0,2,j < s2->nelem
1113,9718,0,0,2,i < s->nelem
1114,9719,0,2,2,p.strchr == s->elems[i].strchr
1115,9721,0,0,2,i < s->nelem
1116,9722,20,2,2,i < s->nelem
1117,9744,0,20,2,i < s->nelem
1118,9748,0,0,2,i < d->sindex
1119,9750,0,2,2,hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem || newline != d->states[i].newline || letter != d->states[i].letter
1120,9753,0,2,2,j < s->nelem
1121,9754,0,0,2,s->elems[j].constraint != d->states[i].elems.elems[j].constraint || s->elems[j].strchr != d->states[i].elems.elems[j].strchr
1122,9758,0,0,2,j == s->nelem
1123,9763,2,0,2,(d->sindex) >= (d->salloc)
1124,9763,3,4,2,(d->sindex) >= (d->salloc)
1125,9772,6,6,2,j < s->nelem
1126,9773,6,5,2,d->tokens[s->elems[j].strchr] < 0
1127,9776,3,3,2,(((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((0) ? 1 : 0)))) || (((constraint) & 1 << (((newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && ((constraint) & 1 << (((letter) ? 2 : 0) + ((1) ? 1 : 0))))
1128,9781,0,0,2,!d->states[i].first_end
1129,9784,3,0,2,d->tokens[s->elems[j].strchr] == BACKREF
1130,9810,4,0,2,i < d->tindex
1131,9813,6,0,2,i < s->nelem
1132,9814,7,0,2,d->tokens[s->elems[i].strchr] >= (1 << 8) && d->tokens[s->elems[i].strchr] != BACKREF && d->tokens[s->elems[i].strchr] < CSET
1133,9821,8,0,2,visited[old.strchr]
1134,9829,8,3,1,case BEGLINE
1135,9832,7,4,1,case ENDLINE
1136,9835,4,3,1,case BEGWORD
1137,9838,2,0,1,case ENDWORD
1138,9841,0,0,1,case LIMWORD
1139,9844,0,0,1,case NOTLIMWORD
1140,9847,0,0,1,default
1141,9850,0,0,2,j < d->follows[old.strchr].nelem
1142,9895,0,0,2,i < d->tindex
1143,9901,0,0,2,i < d->tindex
1144,9907,0,0,1,case EMPTY
1145,9915,0,0,1,case STAR
1146,9916,0,2,1,case PLUS
1147,9922,1,2,2,j < nlastpos[-1]
1148,9925,0,3,2,(merged.nelem - 1) >= (nalloc[pos[j].strchr])
1149,9925,0,0,2,(merged.nelem - 1) >= (nalloc[pos[j].strchr])
1150,9930,0,0,1,case QMARK
1151,9932,0,0,2,d->tokens[i] != PLUS
1152,9936,1,1,1,case CAT
1153,9942,1,2,2,j < nlastpos[-2]
1154,9945,1,2,2,(merged.nelem - 1) >= (nalloc[pos[j].strchr])
1155,9945,0,2,2,(merged.nelem - 1) >= (nalloc[pos[j].strchr])
1156,9952,0,2,2,nullable[-2]
1157,9960,0,3,2,nullable[-1]
1158,9965,0,2,2,j >= 0
1159,9977,0,1,1,case OR
1160,9978,0,9,1,case ORTOP
1161,9992,11,18,1,default
1162,10012,9,12,2,i < d->tindex
1163,10013,2,4,2,d->tokens[i] < (1 << 8) || d->tokens[i] == BACKREF || d->tokens[i] >= CSET
1164,10019,1,2,2,d->follows[i].nelem < merged.nelem
1165,10027,2,2,2,i < nfirstpos[-1]
1166,10033,2,5,2,i < merged.nelem
1167,10034,3,5,2,(((merged.elems[i].constraint) & 192) >> 2 != ((merged.elems[i].constraint) & 48))
1168,10081,0,2,2,!initialized
1169,10084,0,0,2,i < (1 << 8)
1170,10085,0,0,2,(1 && ((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum))
1171,10100,0,0,2,i < d->states[s].elems.nelem
1172,10103,10,0,2,d->tokens[pos.strchr] >= 0 && d->tokens[pos.strchr] < (1 << 8)
1173,10105,14,5,2,d->tokens[pos.strchr] >= CSET
1174,10112,5,4,2,pos.constraint != 255
1175,10114,0,7,2,!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4))
1176,10117,5,6,2,!((pos.constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4))
1177,10119,6,1,2,j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int)))
1178,10121,4,3,2,!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0)))
1179,10123,2,3,2,j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int)))
1180,10125,1,4,2,!((pos.constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0)))
1181,10127,2,5,2,j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int)))
1182,10131,2,1,2,j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int))) && !matches[j]
1183,10133,1,4,2,j == (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int)))
1184,10137,0,5,2,j < ngrps
1185,10142,0,1,2,d->tokens[pos.strchr] >= 0 && d->tokens[pos.strchr] < (1 << 8) && !tstbit(d->tokens[pos.strchr], labels[j])
1186,10149,0,3,2,k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int)))
1187,10151,0,4,2,!intersectf
1188,10156,0,3,2,k < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int)))
1189,10166,0,0,2,leftoversf
1190,10181,0,0,2,!matchesf
1191,10187,0,0,2,j == ngrps
1192,10204,0,0,2,d->searchflag
1193,10208,0,0,2,i < d->states[0].elems.nelem
1194,10210,0,0,2,(((d->states[0].elems.elems[i].constraint) & 192) >> 2 != ((d->states[0].elems.elems[i].constraint) & 48))
1195,10212,0,0,2,(((d->states[0].elems.elems[i].constraint) & 12) >> 2 != ((d->states[0].elems.elems[i].constraint) & 3))
1196,10217,0,0,2,wants_newline
1197,10221,0,0,2,wants_letter
1198,10225,0,0,2,i < (1 << 8)
1199,10226,0,0,2,i == '\n'
1200,10228,0,0,2,(1 && ((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum))
1201,10242,1,0,2,i < (1 << 8)
1202,10245,1,0,2,i < ngrps
1203,10251,0,1,2,j < grps[i].nelem
1204,10252,0,0,2,k < d->follows[grps[i].elems[j].strchr].nelem
1205,10257,1,0,2,d->searchflag
1206,10258,2,1,2,j < d->states[0].elems.nelem
1207,10263,4,0,2,tstbit('\n', labels[i])
1208,10264,4,2,2,j < follows.nelem
1209,10265,3,1,2,(((follows.elems[j].constraint) & 192) >> 2 != ((follows.elems[j].constraint) & 48))
1210,10269,1,5,2,j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int)))
1211,10270,0,4,2,labels[i][j] & letters[j]
1212,10272,0,4,2,j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int)))
1213,10273,0,2,2,j < follows.nelem
1214,10274,0,0,2,(((follows.elems[j].constraint) & 12) >> 2 != ((follows.elems[j].constraint) & 3))
1215,10279,3,0,2,wants_newline
1216,10283,3,0,2,wants_letter
1217,10289,6,2,2,j < (((1 << 8) + (8 * sizeof(int)) - 1) / (8 * sizeof(int)))
1218,10290,3,6,2,k < (8 * sizeof(int))
1219,10291,3,5,2,labels[i][j] & 1 << k
1220,10295,0,3,2,c == '\n'
1221,10297,0,1,2,(1 && ((*__ctype_b_loc())[(int)((c))] & (unsigned short)_ISalnum))
1222,10307,1,3,2,c < (1 << 8)
1223,10312,1,3,2,i < ngrps
1224,10330,62,194,2,d->trcount >= 1024
1225,10332,67,194,2,i < d->tralloc
1226,10333,6,5,2,d->trans[i]
1227,10342,4,7,2,d->fails[i]
1228,10358,5,5,2,((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((1) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0))))
1229,10361,0,5,2,((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((1) ? 1 : 0))))
1230,10364,0,0,2,((((*d).states[s].constraint) & 1 << (((d->states[s].newline) ? 2 : 0) + ((0) ? 1 : 0) + 4)) && (((*d).states[s].constraint) & 1 << (((d->states[s].letter) ? 2 : 0) + ((0) ? 1 : 0))))
1231,10374,0,0,2,i < (1 << 8)
1232,10375,0,0,2,trans[i] >= d->tralloc
1233,10379,0,0,2,trans[i] >= d->tralloc
1234,10386,0,0,2,oldalloc < d->tralloc
1235,10406,0,0,2,((*d).states[s].constraint)
1236,10442,0,0,2,!sbit_init
1237,10447,0,0,2,i < (1 << 8)
1238,10448,1,0,2,i == '\n'
1239,10450,2,1,2,(1 && ((*__ctype_b_loc())[(int)((i))] & (unsigned short)_ISalnum))
1240,10464,0,2,2,!d->tralloc
1241,10472,1,0,2,1
1242,10475,0,2,2,(t = trans[s]) != 0
1243,10476,16,0,2,(t = trans[s]) != 0
1244,10479,0,2,2,!(t = trans[s1])
1245,10489,6,0,2,s >= 0 && p <= (unsigned char *)end && d->fails[s]
1246,10491,6,2,2,d->success[s] & sbit[*p]
1247,10493,6,0,2,backref
1248,10494,3,3,2,d->states[s].backref
1249,10507,0,6,2,count && (char *)p <= end && p[-1] == '\n'
1250,10511,0,6,2,(char *)p > end
1251,10518,0,6,2,s >= 0
1252,10525,0,3,2,p[-1] == '\n' && newline
1253,10563,3,765,2,case_fold
1254,10569,189,1344,2,!copy
1255,10574,186,579,2,i < len
1256,10575,4,0,2,(1 && ((*__ctype_b_loc())[(int)((s[i]))] & (unsigned short)_ISupper))
1257,10616,3,0,2,i < d->sindex
1258,10619,0,0,2,i < d->tindex
1259,10620,4,0,2,d->follows[i].elems
1260,10623,3,0,2,i < d->tralloc
1261,10624,0,4,2,d->trans[i]
1262,10626,0,3,2,d->fails[i]
1263,10631,0,0,2,dm
1264,10652,0,0,2,old == ((void *)0)
1265,10658,4,5,2,newsize == 0
1266,10661,7,3,2,old == ((void *)0)
1267,10669,3,0,2,result != ((void *)0) && new != ((void *)0)
1268,10702,0,8,2,*cp != '\x00'
1269,10703,0,12,2,strncmp(cp, lookfor, len) == 0
1270,10716,0,7,2,cp != ((void *)0)
1271,10730,0,3,2,cpp == ((void *)0)
1272,10736,0,0,2,cpp[i] != ((void *)0)
1273,10759,82,942,2,cpp == ((void *)0)
1274,10769,30,820,2,(new = icpyalloc(new)) == ((void *)0)
1275,10784,82,30,2,cpp[i] != ((void *)0)
1276,10789,30,0,2,istrstr(cpp[i], new) != ((void *)0)
1277,10800,0,0,2,cpp[j] != ((void *)0)
1278,10805,0,3,2,istrstr(new, cpp[j]) == ((void *)0)
1279,10814,0,3,2,--i == j
1280,10825,0,0,2,cpp == ((void *)0)
1281,10857,0,0,2,left == ((void *)0) || right == ((void *)0)
1282,10872,1,2,2,cpp == ((void *)0)
1283,10887,2,4,2,*lcp != '\x00'
1284,10891,2,4,2,rcp != ((void *)0)
1285,10897,1,2,2,lcp[i] != '\x00' && lcp[i] == rcp[i]
1286,10899,2,766,2,i > len
1287,10903,4,768,2,len == 0
1288,10905,5,4,2,(cpp = enlist(cpp, lcp, len)) == ((void *)0)
1289,10922,4,4,2,old == ((void *)0) || new == ((void *)0)
1290,10936,2,41,2,new[i] != ((void *)0)
1291,10943,1,97,2,old == ((void *)0)
1292,10964,1,255,2,left == ((void *)0) || right == ((void *)0)
1293,10979,63,448,2,both == ((void *)0)
1294,10994,63,232,2,left[lnum] != ((void *)0)
1295,11000,10942,97,2,right[rnum] != ((void *)0)
1296,11007,21881,1,2,temp == ((void *)0)
1297,11022,159672,4941,2,both == ((void *)0)
1298,11070,154132,158619,2,musts == ((void *)0)
1299,11077,6023,163990,2,i <= dfa->tindex
1300,11079,118,10853,2,i <= dfa->tindex
1301,11085,118,0,2,mp[i].in == ((void *)0) || mp[i].left == ((void *)0) || mp[i].right == ((void *)0) || mp[i].is == ((void *)0)
1302,11112,88,30,2,ri < dfa->tindex
1303,11116,0,10999,1,case LPAREN
1304,11117,10,21754,1,case RPAREN
1305,11119,12,21742,1,case EMPTY
1306,11120,2,21740,1,case BEGLINE
1307,11121,0,10842,1,case ENDLINE
1308,11122,0,1,1,case BEGWORD
1309,11123,0,1,1,case ENDWORD
1310,11124,0,0,1,case LIMWORD
1311,11125,0,0,1,case NOTLIMWORD
1312,11126,0,0,1,case BACKREF
1313,11129,0,0,1,case STAR
1314,11130,0,0,1,case QMARK
1315,11131,0,0,2,mp <= musts
1316,11136,0,0,1,case OR
1317,11137,0,0,1,case ORTOP
1318,11138,0,1,2,mp < &musts[2]
1319,11149,1,1,2,strcmp(lmp->is, rmp->is) != 0
1320,11153,6,4,2,lmp->left[i] != '\x00' && lmp->left[i] == rmp->left[i]
1321,11160,0,4,2,n > rn
1322,11162,5,4,2,i < n
1323,11163,9,0,2,lmp->right[ln - i - 1] != rmp->right[rn - i - 1]
1324,11165,24,0,2,j < i
1325,11169,30,13,2,new == ((void *)0)
1326,11180,24,9,1,case PLUS
1327,11181,0,8,2,mp <= musts
1328,11186,2,0,1,case END
1329,11187,0,4,2,mp != &musts[1]
1330,11189,0,4,2,musts[0].in[i] != ((void *)0)
1331,11194,0,0,2,strlen(musts[0].in[i]) > strlen(result)
1332,11196,0,3,2,strcmp(result, musts[0].is) == 0
1333,11199,3,3,1,case CAT
1334,11200,1,2,2,mp < &musts[2]
1335,11212,1,1,2,lmp->in == ((void *)0)
1336,11218,0,4,2,lmp->right[0] != '\x00' && rmp->left[0] != '\x00'
1337,11224,0,0,2,tp == ((void *)0)
1338,11231,0,0,2,tp == ((void *)0)
1339,11240,0,0,2,lmp->in == ((void *)0)
1340,11248,0,0,2,lmp->is[0] != '\x00'
1341,11252,0,0,2,lmp->left == ((void *)0)
1342,11260,0,0,2,rmp->is[0] == '\x00'
1343,11263,0,1,2,lmp->right == ((void *)0)
1344,11270,0,1,2,lmp->is[0] != '\x00' && rmp->is[0] != '\x00'
1345,11273,0,1,2,lmp->is == ((void *)0)
1346,11284,1,0,1,default
1347,11285,0,1,2,t < END
1348,11290,0,0,2,t == '\x00'
1349,11295,0,0,2,t >= CSET
1350,11307,0,0,2,mp->in == ((void *)0)
1351,11320,0,0,2,strlen(result)
1352,11330,0,1,2,i <= dfa->tindex
1353,11564,0,1,2,!kwset
1354,11570,6,1,2,__o1->next_free == value
1355,11571,7,6,2,!kwset->trie
1356,11614,10,7,2,len--
1357,11626,5,6,2,link && label != link->label
1358,11629,4,0,2,label < link->label
1359,11638,0,0,2,!link
1360,11640,0,0,2,__o1->next_free == value
1361,11642,0,0,2,!link
1362,11646,0,0,2,__o1->next_free == value
1363,11648,0,0,2,!link->trie
1364,11661,0,0,2,dirs[--depth] == L
1365,11667,0,0,2,depth && !links[depth]->balance
1366,11669,0,0,2,dirs[depth] == L
1367,11677,0,0,2,depth && ((dirs[depth] == L && --links[depth]->balance) || (dirs[depth] == R && ++links[depth]->balance))
1368,11682,0,0,1,case (char) -2
1369,11685,0,0,1,case L
1370,11690,0,0,1,case R
1371,11700,0,0,1,case 2
1372,11703,0,0,1,case R
1373,11708,0,0,1,case L
1374,11720,0,0,2,dirs[depth - 1] == L
1375,11732,0,0,2,!trie->accepting
1376,11737,0,0,2,trie->depth < kwset->mind
1377,11739,0,0,2,trie->depth > kwset->maxd
1378,11752,0,0,2,!tree
1379,11770,0,0,2,!tree
1380,11778,0,0,2,fail
1381,11781,1,0,2,link && tree->label != link->label
1382,11782,1,1,2,tree->label < link->label
1383,11786,1,1,2,link
1384,11805,1,1,2,!tree
1385,11809,0,1,2,depth < delta[tree->label]
1386,11819,1,0,2,!b
1387,11821,3,0,2,!hasevery(a, b->llink)
1388,11823,2,1,2,!hasevery(a, b->rlink)
1389,11825,1,2,2,a && b->label != a->label
1390,11826,0,3,2,b->label < a->label
1391,11840,0,2,2,!tree
1392,11873,1,0,2,kwset->mind < 256
1393,11874,0,1,2,i < ((127 * 2 + 1) + 1)
1394,11881,0,2,2,i < ((127 * 2 + 1) + 1)
1395,11890,0,2,2,kwset->words == 1 && kwset->trans == 0
1396,11893,2,0,2,__o1->next_free == value
1397,11894,1,2,2,i >= 0
1398,11900,0,3,2,i < kwset->mind
1399,11905,0,2,2,i < kwset->mind - 1
1400,11906,3,0,2,kwset->target[i] == kwset->target[kwset->mind - 1]
1401,11913,2,3,2,curr
1402,11929,2,4,2,fail
1403,11934,2,4,2,!hasevery(fail->links, curr->links)
1404,11935,2,2,2,curr->depth - fail->depth < fail->shift
1405,11941,0,3,2,curr->accepting && fail->maxshift > curr->depth - fail->depth
1406,11948,6,3,2,curr
1407,11950,8,0,2,curr->maxshift > curr->parent->maxshift
1408,11952,6,0,2,curr->shift > curr->maxshift
1409,11958,0,1,2,i < ((127 * 2 + 1) + 1)
1410,11966,0,1,2,(trans = kwset->trans) != 0
1411,11967,0,1,2,i < ((127 * 2 + 1) + 1)
1412,11974,2,1,2,i < ((127 * 2 + 1) + 1)
1413,11983,0,2,2,(trans = kwset->trans) != 0
1414,11984,0,0,2,i < ((127 * 2 + 1) + 1)
1415,11991,2,0,2,i < ((127 * 2 + 1) + 1)
1416,12018,0,2,2,len == 0
1417,12020,0,2,2,len > size
1418,12022,0,2,2,len == 1
1419,12032,0,2,2,size > 12 * len
1420,12034,2,0,2,1
1421,12036,0,2,2,tp <= ep
1422,12040,0,0,2,d == 0
1423,12045,0,2,2,d == 0
1424,12050,0,0,2,d == 0
1425,12057,0,0,2,((unsigned char)(tp[-2])) == gc
1426,12059,0,0,2,i <= len && ((unsigned char)(tp[-i])) == ((unsigned char)(sp[-i]))
1427,12061,0,0,2,i > len
1428,12071,0,0,2,d <= ep - tp
1429,12074,0,0,2,d != 0
1430,12076,0,0,2,tp[-2] == gc
1431,12078,1,0,2,i <= len && ((unsigned char)(tp[-i])) == ((unsigned char)(sp[-i]))
1432,12080,1,0,2,i > len
1433,12108,1,0,2,len < kwset->mind
1434,12115,0,0,2,(d = kwset->mind) != 0
1435,12123,0,0,2,len >= 4 * kwset->mind
1436,12128,0,0,2,lim - end >= d
1437,12130,0,0,2,qlim && end <= qlim
1438,12133,0,0,2,(d = delta[c = *end]) && end < qlim
1439,12143,0,0,2,d
1440,12147,0,0,2,trie->accepting
1441,12153,0,0,2,beg > text
1442,12157,0,0,2,tree && c != tree->label
1443,12158,0,0,2,c < tree->label
1444,12162,0,0,2,tree
1445,12165,0,0,2,trie->accepting
1446,12175,0,0,2,mch
1447,12184,0,0,2,lim - mch > kwset->maxd
1448,12188,1,0,2,lim - end >= d
1449,12190,0,0,2,(d = delta[c = (end += d)[-1]]) != 0
1450,12193,0,0,2,!(trie = next[c])
1451,12198,1,0,2,trie->accepting && beg <= mch
1452,12204,0,1,2,beg > text
1453,12208,2,0,2,tree && c != tree->label
1454,12209,0,0,2,c < tree->label
1455,12213,0,0,2,tree
1456,12216,0,1,2,trie->accepting && beg <= mch
1457,12226,0,0,2,lmch
1458,12231,0,0,2,!d
1459,12235,0,0,2,kwsmatch
1460,12255,0,0,2,kwset->words == 1 && kwset->trans == 0
1461,12258,0,0,2,kwsmatch != 0 && ret != 0
1462,12278,0,0,2,__obj > (void *)__o->chunk && __obj < (void *)__o->chunk_limit
1463,12336,0,0,2,match_icase
1464,12337,0,0,2,i < ((127 * 2 + 1) + 1)
1465,12352,0,0,2,!(kwset = kwsalloc(match_icase ? trans : (char *)0))
1466,12366,0,0,2,dfa_1.musts
1467,12372,0,0,2,dm
1468,12374,0,0,2,!dm->exact
1469,12377,0,1,2,(err = kwsincr(kwset, dm->must, strlen(dm->must))) != 0
1470,12382,0,0,2,dm
1471,12384,0,0,2,dm->exact
1472,12386,0,1291,2,(err = kwsincr(kwset, dm->must, strlen(dm->must))) != 0
1473,12389,0,1291,2,(err = kwsprep(kwset)) != 0
1474,12407,0,1291,2,(err = re_compile_pattern(pattern, size, &regex)) != 0
1475,12416,1290,1,2,match_words || match_lines
1476,12429,3215,0,2,match_lines
1477,12431,16489,9,2,match_words
1478,12438,1249,15240,2,match_words
1479,12440,1102,14138,2,match_lines
1480,12462,855,13283,2,strcmp(matcher, "posix-egrep") == 0
1481,12473,1281,1925,2,(err = re_compile_pattern(pattern, size, &regex)) != 0
1482,12482,0,0,2,match_words || match_lines
1483,12495,1281,0,2,match_lines
1484,12497,63,10,2,match_words
1485,12504,63,0,2,match_words
1486,12506,0,0,2,match_lines
1487,12532,0,0,2,end < buflim
1488,12534,0,0,2,kwset
1489,12538,0,0,2,!beg
1490,12543,0,0,2,!end
1491,12545,0,0,2,beg > buf && beg[-1] != '\n'
1492,12548,0,0,2,kwsm.strchr < lastexact
1493,12550,0,0,2,!dfaexec(&dfa_1, beg, end, 0, (int *)0, &backref)
1494,12557,0,0,2,!backref
1495,12566,0,0,2,!beg
1496,12570,0,0,2,!end
1497,12572,0,0,2,beg > buf && beg[-1] != '\n'
1498,12575,0,0,2,!backref
1499,12581,0,0,2,(start = re_search(&regex, beg, end - beg, 0, end - beg, &regs)) >= 0
1500,12584,0,0,2,!match_lines && !match_words || match_lines && len == end - beg
1501,12592,0,0,2,match_words
1502,12593,0,0,2,start >= 0
1503,12595,0,0,2,(start == 0 || !((1 && ((*__ctype_b_loc())[(int)((beg[start - 1]))] & (unsigned short)_ISalnum)) || (beg[start - 1]) == '_')) && (len == end - beg || !((1 && ((*__ctype_b_loc())[(int)((beg[start + len]))] & (unsigned short)_ISalnum)) || (beg[start + len]) == '_'))
1504,12614,0,0,2,len > 0
1505,12621,0,0,2,len <= 0
1506,12624,0,0,2,start == end - beg
1507,12653,0,0,2,beg < pattern + size
1508,12655,0,0,2,lim < pattern + size && *lim != '\n'
1509,12657,0,0,2,(err = kwsincr(kwset, beg, lim - beg)) != 0
1510,12659,0,0,2,lim < pattern + size
1511,12665,0,0,2,(err = kwsprep(kwset)) != 0
1512,12679,0,0,2,beg <= buf + size
1513,12681,0,0,2,!(beg = kwsexec(kwset, beg, buf + size - beg, &kwsmatch))
1514,12684,0,0,2,match_lines
1515,12686,0,0,2,beg > buf && beg[-1] != '\n'
1516,12688,1291,0,2,beg + len < buf + size && beg[len] != '\n'
1517,12692,1281,10,2,match_words
1518,12693,0,0,2,len && try
1519,12695,0,1,2,try > buf && ((1 && ((*__ctype_b_loc())[(int)(((unsigned char)try[-1]))] & (unsigned short)_ISalnum)) || ((unsigned char)try[-1]) == '_')
